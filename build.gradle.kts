import java.security.MessageDigest 
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.5/samples
 * This project uses @Incubating APIs which are subject to change.
 */

 version = "2.3.4"

 plugins{
    java
    checkstyle
 }

 repositories {
    mavenCentral()
}

checkstyle {
    val archive = configurations.checkstyle.get().resolve().filter {
        it.name.startsWith("checkstyle")
    }
    config = resources.text.fromArchiveEntry(archive, "google_checks.xml")
}

dependencies {
  testImplementation(platform("org.junit:junit-bom:5.10.1"))
  testImplementation("org.junit.jupiter:junit-jupiter")
}

abstract class CheckVersionTask : DefaultTask() {
    @TaskAction
    fun checkVersion() {
       val re = Regex("\\d+\\.\\d+\\.\\d+")
        if (re.matches(project.version.toString())) {
            println("It's ok!")
        }
        else{
        throw RuntimeException("Version has invalid format")
        }
        println("Current version: ${project.version}")
    }
}

abstract class Md5Task : Exec() {
    init {
        executable = "md5sum"
    }
    fun setTarget(directory: Directory, fileName: String) {
        directory.file(fileName)?.asFile?.let {
            args = listOf(it.absolutePath)
        }
    }
}

tasks.named<ProcessResources>("processResources") {
    eachFile {
        println("Copying: $sourceName to $destinationDir")
    }    
}

tasks.named<DefaultTask>("check") {
    dependsOn(checkVersion)
}

val checkVersion = tasks.register<CheckVersionTask>("checkVersion") {
    description = "Checks that the project version follows the standard major.minor.patch format"
    group = "Verification"
}

fun ByteArray.md5(): String {
    val md = MessageDigest.getInstance("MD5");
    return md.digest(this).joinToString("") { "%02x".format(it) }
}

fun File.md5(): String {
    return readBytes().md5()
}

tasks.filterIsInstance<Jar>().forEach {
    val destDir by it.destinationDirectory
    val fileName by it.archiveFileName
    val taskName = "md5${it.name}"
    val md5Task = tasks.create<Md5Task>(taskName) {
        setTarget(destDir, fileName)
    }
    it.finalizedBy(md5Task)     // Run the md5Task after the jar task
}